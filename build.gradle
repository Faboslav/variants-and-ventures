plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
	id "io.github.pacifistmc.forgix" version "1.2.9"
}

architectury {
	minecraft = minecraft_version
}

forgix {
	group = maven_group
	mergedJarName = "${mod_id}-mc${minecraft_version}-${mod_version}.jar"
	outputDir = "build/libs/merged"

	if (findProject(":fabric"))
		fabric {
			projectName = "fabric"
			jarLocation = "build/libs/${mod_id}-fabric-mc${minecraft_version}-${mod_version}.jar"
		}

	if (findProject(":forge"))
		forge {
			projectName = "forge"
			jarLocation = "build/libs/${mod_id}-forge-mc${minecraft_version}-${mod_version}.jar"
		}

	if (findProject(":neoforge"))
		custom {
			projectName = "neoforge"
			jarLocation = "build/libs/${mod_id}-neoforge-mc${minecraft_version}-${mod_version}.jar"
		}
}

subprojects {
	apply plugin: "dev.architectury.loom"

	dependencies {
		minecraft "com.mojang:minecraft:${minecraft_version}"
		mappings "net.fabricmc:yarn:${yarn_mappings}"
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"

	group = maven_group
	version = mod_version
	archivesBaseName = "${mod_id}-mc${minecraft_version}"

	processResources {
		def expandProps = [
			"modJavaVersion"     : mod_java_version,
			'modId'              : mod_id,
			'modName'            : mod_name,
			'modDescription'     : mod_description,
			'modVersion'         : mod_version,
			'modAuthor'          : mod_author,
			"minecraftVersion"   : minecraft_version,
			"minMinecraftVersion": min_minecraft_version,
			"fabricLoaderVersion": fabric_loader_version,
			"fabricApiVersion"   : fabric_api_version,
			"neoForgeVersion"    : neoforge_version
		]

		filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
			expand expandProps
		}

		inputs.properties(expandProps)
	}

	repositories {
		maven {
			name = "Jitpack"
			url 'https://jitpack.io/'
		}
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.getRelease().set(mod_java_version as Integer)
	}

	java {
		withSourcesJar()

		sourceCompatibility = JavaVersion.toVersion(mod_java_version)
		targetCompatibility = JavaVersion.toVersion(mod_java_version)
	}
}